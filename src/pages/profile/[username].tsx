import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import Challenges from "~/components/Challenges";
import { MdiGithub } from "~/components/Icones";
import PageHeader from "~/components/PageHeader";
import { prisma } from "~/server/db";
import { generateSSGHelper } from "~/server/helpers/ssgHelper";
import { api } from "~/utils/api";

type Props = {
  username: string;
};

const ProfilePage: NextPage<Props> = ({ username }: Props) => {
  // const router = useRouter();
  const { data: user } = api.user.getUserByUsername.useQuery({
    username: username,
  });
  const { data: challenges } = api.challenge.getAllByUser.useQuery();
  if (!user) {
    return <div>loading...</div>;
  }
  const title = `Code Crafters | ${username}`;
  return (
    <>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PageHeader pageTitle="Profile" />
      <main className="mt-28">
        <section
          style={{
            clipPath: "inset(0 -100vmax)",
          }}
          className="mx-auto flex max-w-[80rem] flex-col items-center space-y-5 bg-white px-2 py-4 shadow-[0_0_0_100vmax] shadow-white md:flex-row md:space-x-8 md:space-y-0 md:px-6 md:py-8 "
        >
          <div>
            <Image
              className=" h-32 w-32 rounded-full md:h-40 md:w-40 "
              src={user.image || ""}
              alt="user"
              width={200}
              height={200}
            />
          </div>
          <div className="flex flex-[2] flex-col justify-between gap-3 ">
            <div className="flex flex-col items-center md:items-start">
              <h3 className="text-center text-2xl font-medium  text-gray-900 ">
                {user.name}
              </h3>
              <p className="  ">@{user.username}</p>
            </div>
            <Link target="_blank" href={(user.githubURL as string) || ""} className="flex  justify-center  md:justify-start">
              {user.githubURL && <MdiGithub className="h-8 w-8" />}
            </Link>
          </div>
          <p className="flex-[3]">{user.about}</p>
        </section>
        <section className="">
          <h3 className="my-8 text-center text-2xl font-semibold">
            All Challenges
          </h3>
          <Challenges challenges={challenges} />
        </section>
      </main>
    </>
  );
};

export const getStaticPaths = async () => {
  const users = await prisma.user.findMany({
    select: {
      username: true,
    },
  });
  return {
    paths: users.map((user) => ({
      params: {
        username: user.username,
      },
    })),
    fallback: true,
  };
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = generateSSGHelper();
  const username = context.params?.username;

  if (typeof username !== "string") throw new Error("Slug is not a string");

  await ssg.user.getUserByUsername.prefetch({ username });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export default ProfilePage;
